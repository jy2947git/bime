<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"
       default-lazy-init="true">

    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=org.hibernate.dialect.MySQLDialect
                hibernate.query.substitutions=true 'Y', false 'N'
                hibernate.cache.use_second_level_cache=false
                hibernate.cache.use_query_cache=false
                hibernate.cache.provider_class=org.hibernate.cache.NoCacheProvider
                hibernate.show_sql=true
            </value>
            <!-- Turn batching off for better error messages under PostgreSQL -->
            <!-- hibernate.jdbc.batch_size=0 -->
        </property>
    </bean>

    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
<!--  
    <bean id="masterDao" class="com.focaplo.myfuse.dao.MasterDao">
    	<property name="dataSource"><ref bean="masterDataSource"/></property>
    	<property name="userDao"><ref bean="userDao"/></property>
    </bean>
    -->
    <!-- UniversalDao - can be used when doing standard CRUD - made available 
        for those who don't mind casting.  If you don't want to cast, look at 
        'fooDao' below. -->
    <bean id="universalDao" class="com.focaplo.myfuse.dao.hibernate.UniversalDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="lookupDao" class="com.focaplo.myfuse.dao.hibernate.LookupDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="userDao" class="com.focaplo.myfuse.dao.hibernate.UserDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="roleDao" class="com.focaplo.myfuse.dao.hibernate.RoleDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <bean id="inventoryDao" class="com.focaplo.myfuse.dao.hibernate.InventoryDao" parent="universalDao">
        
    </bean>
     <bean id="projectDao" class="com.focaplo.myfuse.dao.hibernate.ProjectDao" parent="universalDao">
        
    </bean>
     <bean id="grantDao" class="com.focaplo.myfuse.dao.hibernate.GrantDao" parent="universalDao">
        
    </bean>
    <bean id="orderDao" class="com.focaplo.myfuse.dao.hibernate.OrderDao" parent="universalDao">
        
    </bean>
    <bean id="labDao" class="com.focaplo.myfuse.dao.hibernate.LabDao" parent="universalDao">
        
    </bean>
    <!-- If you want to be able to do simple CRUD for new domain objects without 
        having to cast, you don't have create a Dao interface and implementation 
        for that domain object, you simply have to do the following.  
        
        eg... 'fooDao'
    
    <bean id="fooDao" class="com.focaplo.myfuse.dao.hibernate.GenericDao">
        <constructor-arg value="com.focaplo.myfuse.model.Foo"/>
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    You will need to create a Dao interface and implementation for that 
        domain object if you need more than simple CRUD to occur.  
        (finders, bulk update/delete, etc.)
    -->

    <!-- Add new DAOs here -->

</beans>
